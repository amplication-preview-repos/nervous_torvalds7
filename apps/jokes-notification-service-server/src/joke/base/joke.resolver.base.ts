/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Joke } from "./Joke";
import { JokeCountArgs } from "./JokeCountArgs";
import { JokeFindManyArgs } from "./JokeFindManyArgs";
import { JokeFindUniqueArgs } from "./JokeFindUniqueArgs";
import { CreateJokeArgs } from "./CreateJokeArgs";
import { UpdateJokeArgs } from "./UpdateJokeArgs";
import { DeleteJokeArgs } from "./DeleteJokeArgs";
import { JokeService } from "../joke.service";
@graphql.Resolver(() => Joke)
export class JokeResolverBase {
  constructor(protected readonly service: JokeService) {}

  async _jokesMeta(
    @graphql.Args() args: JokeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Joke])
  async jokes(@graphql.Args() args: JokeFindManyArgs): Promise<Joke[]> {
    return this.service.jokes(args);
  }

  @graphql.Query(() => Joke, { nullable: true })
  async joke(@graphql.Args() args: JokeFindUniqueArgs): Promise<Joke | null> {
    const result = await this.service.joke(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Joke)
  async createJoke(@graphql.Args() args: CreateJokeArgs): Promise<Joke> {
    return await this.service.createJoke({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Joke)
  async updateJoke(@graphql.Args() args: UpdateJokeArgs): Promise<Joke | null> {
    try {
      return await this.service.updateJoke({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Joke)
  async deleteJoke(@graphql.Args() args: DeleteJokeArgs): Promise<Joke | null> {
    try {
      return await this.service.deleteJoke(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
