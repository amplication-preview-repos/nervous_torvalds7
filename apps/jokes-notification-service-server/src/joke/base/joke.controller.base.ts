/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JokeService } from "../joke.service";
import { JokeCreateInput } from "./JokeCreateInput";
import { Joke } from "./Joke";
import { JokeFindManyArgs } from "./JokeFindManyArgs";
import { JokeWhereUniqueInput } from "./JokeWhereUniqueInput";
import { JokeUpdateInput } from "./JokeUpdateInput";

export class JokeControllerBase {
  constructor(protected readonly service: JokeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Joke })
  @swagger.ApiBody({
    type: JokeCreateInput,
  })
  async createJoke(@common.Body() data: JokeCreateInput): Promise<Joke> {
    return await this.service.createJoke({
      data: data,
      select: {
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Joke] })
  @ApiNestedQuery(JokeFindManyArgs)
  async jokes(@common.Req() request: Request): Promise<Joke[]> {
    const args = plainToClass(JokeFindManyArgs, request.query);
    return this.service.jokes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Joke })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async joke(
    @common.Param() params: JokeWhereUniqueInput
  ): Promise<Joke | null> {
    const result = await this.service.joke({
      where: params,
      select: {
        createdAt: true,
        id: true,
        text: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Joke })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: JokeUpdateInput,
  })
  async updateJoke(
    @common.Param() params: JokeWhereUniqueInput,
    @common.Body() data: JokeUpdateInput
  ): Promise<Joke | null> {
    try {
      return await this.service.updateJoke({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Joke })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJoke(
    @common.Param() params: JokeWhereUniqueInput
  ): Promise<Joke | null> {
    try {
      return await this.service.deleteJoke({
        where: params,
        select: {
          createdAt: true,
          id: true,
          text: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
